#include <Arduino.h>
#include "credentials.h"
#include <WiFi.h>
#include <Wire.h>
#include <xboxlogo.h>
#include <PubSubClient.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

#define LED_BUILTIN 2

WiFiClient client;
Adafruit_SSD1306 display(128, 64, &Wire, -1);
QueueHandle_t messageQueue;
TaskHandle_t displayMessageTask;
PubSubClient MQTTClient;

unsigned long messageStartTime;
unsigned long messageCount = 0;
unsigned long maxMessageCount = 0; //874 seems to be it (with OLED display this is down to 402), (770 if not writing to serial and writing to OLED every second)

void displayMessage(void *parameter);
void sendMQTTmessage(String message);
void updateMessageCount();
void checkMQTTconnection();
void printMessage(String message);

void setup()
{
  pinMode(23, OUTPUT);
  digitalWrite(23, HIGH);

  pinMode(LED_BUILTIN, OUTPUT);

  // Init I2C bus & OLED
  Wire.begin();

  Serial.begin(115200);
  Serial2.begin(115200);

  //turn off bluetooth
  btStop();

  // Create the queues with
  messageQueue = xQueueCreate(2, sizeof(String));

  if (display.begin(SSD1306_SWITCHCAPVCC, 0x3C) == false)
  {
    delay(1000);
    ESP.restart();
  }
  else
  {
    display.clearDisplay(); //for Clearing the display
    //https://javl.github.io/image2cpp/
    display.drawBitmap(0, 16, xboxLogo, 128, 48, WHITE); // display.drawBitmap(x position, y position, bitmap data, bitmap width, bitmap height, color)
    display.display();

    //create a seperate task for OLED display
    xTaskCreatePinnedToCore(
        displayMessage,      /* Function to implement the task */
        "Display Message",   /* Name of the task */
        5000,                /* Stack size in words */
        NULL,                /* Task input parameter */
        2,                   /* Priority of the task */
        &displayMessageTask, /* Task handle. */
        1);                  /* Core where the task should run */
  }

  //WIFI start up
  printMessage("Connecting to " + (String)ssid);
  //Serial.printf("Connecting to %s\n", ssid);
  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);

  //connect
  while (WiFi.status() != WL_CONNECTED)
  {
    delay(500);
    Serial.println(".");
  }

  Serial.print("Connected! IP address: ");
  Serial.println(WiFi.localIP());

  //set this to be a large enough value to allow an MQTT message containing a 22Kb JPEG to be sent
  MQTTClient.setBufferSize(30000);

  Serial.println("Connecting to MQTT server");
  MQTTClient.setClient(client);
  MQTTClient.setServer(MQTT_SERVER, 1883);

  Serial.println("connect mqtt...");
  checkMQTTconnection();

  messageStartTime = millis();
}

void loop()
{
  updateMessageCount();

  if (Serial2.available())
  {
    digitalWrite(LED_BUILTIN, HIGH);

    auto message = Serial2.readStringUntil('\n');

    Serial.println(message);

    sendMQTTmessage(message);

    messageCount++;

    digitalWrite(LED_BUILTIN, LOW);
  }
}

void printMessage(String message){
    xQueueSend(messageQueue, &message, portMAX_DELAY);
}


void updateMessageCount()
{
  //send reciever state every one second
  if (millis() - messageStartTime >= 1000)
  {
    if (messageCount > maxMessageCount)
    {
      maxMessageCount = messageCount;
    }
    messageStartTime = millis();
    //Serial.print("Max Messages Recieved: " + (String)maxMessageCount);
    Serial.println("Max Messages Recieved: " + (String)maxMessageCount);

    String message = "Max: " + (String)maxMessageCount;

    xQueueSend(messageQueue, &message, portMAX_DELAY);

    messageCount = 0;
  }
}

void displayMessage(void *parameter)
{
  for (;;)
  {
    String message;
    xQueueReceive(messageQueue, &message, portMAX_DELAY);

    Serial.println("Worker - reading " + message);

    // display.clear();
    // display.setFont(ArialMT_Plain_10);
    // display.drawString(0, 0, message);
    // display.display();

    display.clearDisplay(); //for Clearing the display
    //https://javl.github.io/image2cpp/
    //display.print(message);

    display.setTextSize(1); // Draw 2X-scale text
    display.setTextColor(SSD1306_WHITE);
    display.setCursor(0, 0);
    //display.println(F("hello"));
    display.println((String)message);

    display.drawBitmap(0, 16, xboxLogo, 128, 48, WHITE); // display.drawBitmap(x position, y position, bitmap data, bitmap width, bitmap height, color)
    display.display();
  }
}

void sendMQTTmessage(String message)
{
  checkMQTTconnection();

  message.trim();

  MQTTClient.publish("value", message.c_str());
}

void checkMQTTconnection()
{
  if (!MQTTClient.connected())
  {

    if (MQTTClient.connect(MQTT_CLIENTID, MQTT_USERNAME, MQTT_KEY))
    {
      Serial.println("Connected to MQTT server");
    }
  }
}
